name: release-bundles

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows bundle
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build release binaries
        run: |
          cargo build --release -p mdmcpcfg -p mdmcpsrvr -p mdaicli -p mdconfcli -p mdjiracli -p mdmailcli -p mdslackcli
      - name: Stage bundle
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist/windows/bin/plugins | Out-Null
          Copy-Item target/release/mdmcpcfg.exe dist/windows/mdmcpcfg.exe
          Copy-Item target/release/mdmcpsrvr.exe dist/windows/bin/mdmcpsrvr.exe
          Copy-Item target/release/mdaicli.exe    dist/windows/bin/plugins/mdaicli.exe
          Copy-Item target/release/mdconfcli.exe  dist/windows/bin/plugins/mdconfcli.exe
          Copy-Item target/release/mdjiracli.exe  dist/windows/bin/plugins/mdjiracli.exe
          Copy-Item target/release/mdmailcli.exe  dist/windows/bin/plugins/mdmailcli.exe
          Copy-Item target/release/mdslackcli.exe dist/windows/bin/plugins/mdslackcli.exe
      - name: Stage raw assets (mdmcpcfg only)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist/assets | Out-Null
          New-Item -ItemType Directory -Force -Path dist/zips   | Out-Null
          Copy-Item target/release/mdmcpcfg.exe   dist/assets/windows-mdmcpcfg.exe
          $hash = (Get-FileHash -Algorithm SHA256 -Path dist/assets/windows-mdmcpcfg.exe).Hash
          "$hash  windows-mdmcpcfg.exe" | Set-Content -Encoding ASCII dist/assets/windows-mdmcpcfg.exe.sha256
      - name: Create Windows binaries zip (bin/ only)
        shell: pwsh
        run: |
          Compress-Archive -Path dist/windows/bin -DestinationPath dist/zips/windows-binaries.zip -Force
          $hash = (Get-FileHash -Algorithm SHA256 -Path dist/zips/windows-binaries.zip).Hash
          "$hash  windows-binaries.zip" | Set-Content -Encoding ASCII dist/zips/windows-binaries.zip.sha256
      - name: Checksums
        shell: pwsh
        run: |
          $base    = Resolve-Path dist/windows
          $cli     = Join-Path $base 'mdmcpcfg.exe'
          $cliSha  = Join-Path $base 'mdmcpcfg.exe.sha256'
          $shaFile = Join-Path $base 'SHA256SUMS.txt'
          ((Get-FileHash -Path $cli -Algorithm SHA256).Hash + '  mdmcpcfg.exe') | Set-Content -Encoding ASCII $cliSha
          $files = Get-ChildItem -Path $base -Recurse -File | Where-Object { $_.Name -ne 'SHA256SUMS.txt' -and $_.Extension -ne '.sha256' }
          $lines = foreach ($f in $files) {
            $rel = $f.FullName.Substring($base.Path.Length + 1).Replace('\\','/')
            $hash = (Get-FileHash -Path $f.FullName -Algorithm SHA256).Hash
            "$hash  $rel"
          }
          $lines | Set-Content -Encoding ASCII $shaFile
      - name: Upload windows bundle
        uses: actions/upload-artifact@v4
        with:
          name: bundle-windows
          path: dist/windows
          if-no-files-found: error
      - name: Upload windows assets
        uses: actions/upload-artifact@v4
        with:
          name: assets-windows
          path: dist/assets
          if-no-files-found: error
      - name: Upload windows zip
        uses: actions/upload-artifact@v4
        with:
          name: zips-windows
          path: dist/zips
          if-no-files-found: error

  build-macos:
    name: Build macOS bundle
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build release binaries
        run: |
          cargo build --release -p mdmcpcfg -p mdmcpsrvr -p mdaicli -p mdconfcli -p mdjiracli -p mdmailcli -p mdslackcli
      - name: Stage bundle
        run: |
          mkdir -p dist/macos/bin/plugins
          cp target/release/mdmcpcfg dist/macos/mdmcpcfg
          cp target/release/mdmcpsrvr dist/macos/bin/mdmcpsrvr
          cp target/release/mdaicli   dist/macos/bin/plugins/mdaicli
          cp target/release/mdconfcli dist/macos/bin/plugins/mdconfcli
          cp target/release/mdjiracli dist/macos/bin/plugins/mdjiracli
          cp target/release/mdmailcli dist/macos/bin/plugins/mdmailcli
          cp target/release/mdslackcli dist/macos/bin/plugins/mdslackcli
          chmod +x dist/macos/mdmcpcfg dist/macos/bin/mdmcpsrvr dist/macos/bin/plugins/mdaicli
      - name: Stage raw assets (mdmcpcfg only)
        run: |
          mkdir -p dist/assets dist/zips
          cp target/release/mdmcpcfg   dist/assets/macos-mdmcpcfg
          chmod +x dist/assets/macos-mdmcpcfg
          shasum -a 256 dist/assets/macos-mdmcpcfg | awk '{print $1 "  macos-mdmcpcfg"}' > dist/assets/macos-mdmcpcfg.sha256
      - name: Create macOS binaries zip (bin/ only)
        run: |
          (cd dist/macos && zip -r ../../dist/zips/macos-binaries.zip bin)
          (cd dist/zips && shasum -a 256 macos-binaries.zip | awk '{print $1 "  macos-binaries.zip"}' > macos-binaries.zip.sha256)
      - name: Checksums
        run: |
          (shasum -a 256 dist/macos/mdmcpcfg | awk '{print $1 "  mdmcpcfg"}') > dist/macos/mdmcpcfg.sha256
          (cd dist/macos && find . -type f ! -name 'SHA256SUMS.txt' ! -name '*.sha256' -print0 | xargs -0 shasum -a 256 | sed 's| ./||') > dist/macos/SHA256SUMS.txt
      - name: Upload macOS bundle
        uses: actions/upload-artifact@v4
        with:
          name: bundle-macos
          path: dist/macos
          if-no-files-found: error
      - name: Upload macOS assets
        uses: actions/upload-artifact@v4
        with:
          name: assets-macos
          path: dist/assets
          if-no-files-found: error
      - name: Upload macOS zip
        uses: actions/upload-artifact@v4
        with:
          name: zips-macos
          path: dist/zips
          if-no-files-found: error

  build-linux:
    name: Build Linux bundle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Build release binaries
        run: |
          cargo build --release -p mdmcpcfg -p mdmcpsrvr -p mdaicli -p mdconfcli -p mdjiracli -p mdmailcli -p mdslackcli
      - name: Stage bundle
        run: |
          mkdir -p dist/linux/bin/plugins
          cp target/release/mdmcpcfg dist/linux/mdmcpcfg
          cp target/release/mdmcpsrvr dist/linux/bin/mdmcpsrvr
          cp target/release/mdaicli   dist/linux/bin/plugins/mdaicli
          cp target/release/mdconfcli dist/linux/bin/plugins/mdconfcli
          cp target/release/mdjiracli dist/linux/bin/plugins/mdjiracli
          cp target/release/mdmailcli dist/linux/bin/plugins/mdmailcli
          cp target/release/mdslackcli dist/linux/bin/plugins/mdslackcli
          chmod +x dist/linux/mdmcpcfg dist/linux/bin/mdmcpsrvr dist/linux/bin/plugins/mdaicli
      - name: Stage raw assets (mdmcpcfg only)
        run: |
          mkdir -p dist/assets dist/zips
          cp target/release/mdmcpcfg   dist/assets/linux-mdmcpcfg
          chmod +x dist/assets/linux-mdmcpcfg
          sha256sum dist/assets/linux-mdmcpcfg | awk '{print $1 "  linux-mdmcpcfg"}' > dist/assets/linux-mdmcpcfg.sha256
      - name: Create Linux binaries zip (bin/ only)
        run: |
          (cd dist/linux && zip -r ../../dist/zips/linux-binaries.zip bin)
          (cd dist/zips && sha256sum linux-binaries.zip | awk '{print $1 "  linux-binaries.zip"}' > linux-binaries.zip.sha256)
      - name: Checksums
        run: |
          (sha256sum dist/linux/mdmcpcfg | awk '{print $1 "  mdmcpcfg"}') > dist/linux/mdmcpcfg.sha256
          (cd dist/linux && find . -type f ! -name 'SHA256SUMS.txt' ! -name '*.sha256' -print0 | xargs -0 sha256sum | sed 's| ./||') > dist/linux/SHA256SUMS.txt
      - name: Upload linux bundle
        uses: actions/upload-artifact@v4
        with:
          name: bundle-linux
          path: dist/linux
          if-no-files-found: error
      - name: Upload linux assets
        uses: actions/upload-artifact@v4
        with:
          name: assets-linux
          path: dist/assets
          if-no-files-found: error
      - name: Upload linux zip
        uses: actions/upload-artifact@v4
        with:
          name: zips-linux
          path: dist/zips
          if-no-files-found: error

  assemble:
    name: Assemble universal layout
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos, build-linux]
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create release tree
        run: |
          mkdir -p bundle
          cp ./release/README.md bundle/README.md
          # Move OS folders under bundle root
          mv dist/bundle-windows bundle/windows
          mv dist/bundle-macos bundle/macos
          mv dist/bundle-linux bundle/linux
          # Collect raw mdmcpcfg assets and per-OS binaries zips
          mkdir -p assets zips
          cp -R dist/assets-windows/* assets/
          cp -R dist/assets-macos/* assets/
          cp -R dist/assets-linux/* assets/
          cp -R dist/zips-windows/* zips/
          cp -R dist/zips-macos/* zips/
          cp -R dist/zips-linux/* zips/
      - name: Archive
        run: |
          ver="${GITHUB_REF##*/}"
          tar -C bundle -czf "release-${ver}.tar.gz" .
          (cd bundle && zip -r "../release-${ver}.zip" .)
      - name: Upload assembled artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-bundles
          path: |
            release-*.tar.gz
            release-*.zip
          if-no-files-found: error
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-*.tar.gz
            release-*.zip
            assets/*
            zips/*
          token: ${{ github.token }}
